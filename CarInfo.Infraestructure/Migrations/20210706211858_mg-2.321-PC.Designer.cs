// <auto-generated />
using System;
using CarInfo.Infraestructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace CarInfo.Infraestructure.Migrations
{
    [DbContext(typeof(CarInfoDataBaseContext))]
    [Migration("20210706211858_mg-2.321-PC")]
    partial class mg2321PC
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.6")
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

            modelBuilder.Entity("CarInfo.Infraestructure.Entities.CarBrand", b =>
                {
                    b.Property<int>("idCarBrand")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("countryBrand")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("nameBrand")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("sinceBrand")
                        .IsRequired()
                        .HasMaxLength(4)
                        .HasColumnType("character varying(4)");

                    b.HasKey("idCarBrand");

                    b.ToTable("CarBrand");

                    b.HasData(
                        new
                        {
                            idCarBrand = 1,
                            countryBrand = "Japón",
                            nameBrand = "Toyota",
                            sinceBrand = "1937"
                        },
                        new
                        {
                            idCarBrand = 2,
                            countryBrand = "Estados Unidos (USA)",
                            nameBrand = "Ford",
                            sinceBrand = "1903"
                        },
                        new
                        {
                            idCarBrand = 3,
                            countryBrand = "Estados Unidos (USA)",
                            nameBrand = "Chevrolet",
                            sinceBrand = "1911"
                        },
                        new
                        {
                            idCarBrand = 4,
                            countryBrand = "Alemania",
                            nameBrand = "Audi",
                            sinceBrand = "1909"
                        });
                });

            modelBuilder.Entity("CarInfo.Infraestructure.Entities.CarModel", b =>
                {
                    b.Property<int>("idCarModel")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int?>("gatesNumber")
                        .HasColumnType("integer");

                    b.Property<int>("idCarBrand")
                        .HasColumnType("integer");

                    b.Property<int>("idCarType")
                        .HasColumnType("integer");

                    b.Property<string>("nameModel")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<double>("price")
                        .HasColumnType("double precision");

                    b.Property<string>("yearModel")
                        .IsRequired()
                        .HasMaxLength(4)
                        .HasColumnType("character varying(4)");

                    b.HasKey("idCarModel");

                    b.HasIndex("idCarBrand");

                    b.HasIndex("idCarType");

                    b.ToTable("CarModel");

                    b.HasData(
                        new
                        {
                            idCarModel = 1,
                            idCarBrand = 1,
                            idCarType = 1,
                            nameModel = "Corolla Hybrid LE",
                            price = 22000.0,
                            yearModel = "2021"
                        },
                        new
                        {
                            idCarModel = 2,
                            idCarBrand = 1,
                            idCarType = 3,
                            nameModel = "RAV4 Hybrid",
                            price = 28800.0,
                            yearModel = "2021"
                        },
                        new
                        {
                            idCarModel = 3,
                            idCarBrand = 3,
                            idCarType = 2,
                            nameModel = "Camaro Six SS",
                            price = 50000.0,
                            yearModel = "2021"
                        },
                        new
                        {
                            idCarModel = 4,
                            idCarBrand = 2,
                            idCarType = 3,
                            nameModel = "Beat",
                            price = 41890.0,
                            yearModel = "2021"
                        },
                        new
                        {
                            idCarModel = 6,
                            idCarBrand = 2,
                            idCarType = 2,
                            nameModel = "MustangShelby GT350",
                            price = 64870.0,
                            yearModel = "2021"
                        },
                        new
                        {
                            idCarModel = 7,
                            idCarBrand = 4,
                            idCarType = 2,
                            nameModel = "R8 Coupé",
                            price = 200000.0,
                            yearModel = "2021"
                        },
                        new
                        {
                            idCarModel = 8,
                            idCarBrand = 4,
                            idCarType = 3,
                            nameModel = "Q8",
                            price = 85785.0,
                            yearModel = "2021"
                        });
                });

            modelBuilder.Entity("CarInfo.Infraestructure.Entities.CarType", b =>
                {
                    b.Property<int>("idCarType")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("descriptionType")
                        .IsRequired()
                        .HasMaxLength(400)
                        .HasColumnType("character varying(400)");

                    b.Property<string>("nameType")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("idCarType");

                    b.ToTable("CarType");

                    b.HasData(
                        new
                        {
                            idCarType = 1,
                            descriptionType = "Son aquellos turismos derivados de compactos, sedanes o berlinas con carrocería de cinco puertas y techo elevado, a fin de ampliar el compartimento de carga, es decir, poseen una carrocería familiar o lo que comúnmente llamaríamos 'ranchera'",
                            nameType = "Familiar"
                        },
                        new
                        {
                            idCarType = 2,
                            descriptionType = "Dentro de este tipo de vehículos encontramos diversos tipos de carrocerías, pero todos ellos se caracterizan por equipar diseños realmente atractivos, motores muy potentes, una velocidad máxima que supera los 250 km/h y una tracción increíble enfocada a darte mayores prestaciones sobre la pista.",
                            nameType = "Deportivo"
                        },
                        new
                        {
                            idCarType = 3,
                            descriptionType = "Este tipo de coches pueden tener tres, cuatro o cinco puertas, dependiendo un poco del diseño de su carrocería. Están diseñados para que puedan viajar cuatro pasajeros cómodamente y se corresponden con lo que conocemos como segmento B -aproximadamente de 3,9 a 4,3 metros de longitud-.",
                            nameType = "Subcompacto"
                        },
                        new
                        {
                            idCarType = 4,
                            descriptionType = "En el segmento de los urbanos podemos encontrar una gran variedad de modelos de distinto tamaño. En este grupo podríamos meter desde los micro-coches o pequeños utilitarios",
                            nameType = "Urbano"
                        });
                });

            modelBuilder.Entity("CarInfo.Infraestructure.Entities.CarModel", b =>
                {
                    b.HasOne("CarInfo.Infraestructure.Entities.CarBrand", "carBrand")
                        .WithMany("carModelHasCarBrand")
                        .HasForeignKey("idCarBrand")
                        .HasConstraintName("FK_CarModelToCarBrand")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CarInfo.Infraestructure.Entities.CarType", "carType")
                        .WithMany("carModelHasCarType")
                        .HasForeignKey("idCarType")
                        .HasConstraintName("FK_CarModelToCarType")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("carBrand");

                    b.Navigation("carType");
                });

            modelBuilder.Entity("CarInfo.Infraestructure.Entities.CarBrand", b =>
                {
                    b.Navigation("carModelHasCarBrand");
                });

            modelBuilder.Entity("CarInfo.Infraestructure.Entities.CarType", b =>
                {
                    b.Navigation("carModelHasCarType");
                });
#pragma warning restore 612, 618
        }
    }
}
